<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Guides on SLE BCI Documentation</title><link>https://opensource.suse.com/bci-docs/guides/</link><description>Recent content in Guides on SLE BCI Documentation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://opensource.suse.com/bci-docs/guides/index.xml" rel="self" type="application/rss+xml"/><item><title>Adding Users to BCI Micro and Minimal</title><link>https://opensource.suse.com/bci-docs/guides/adding-users/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://opensource.suse.com/bci-docs/guides/adding-users/</guid><description>This guide will demonstrate how to add users to the BCI Micro and Minimal images, without having the useradd binary installed.
Background The BCI Micro and Minimal images are tailored towards providing a small footprint and thus do not ship the useradd binary. While this reduces the image size, creating new users inside containers based on BCI Micro or Minimal involves a few additional steps.
Switch to using the Busybox BCI BCI Minimal and BCI Micro are lightweight deployment images without a package manager and tailored for specific use cases.</description></item><item><title>Building and Deploying Go Applications</title><link>https://opensource.suse.com/bci-docs/guides/use-with-golang/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://opensource.suse.com/bci-docs/guides/use-with-golang/</guid><description>There is a SLE BCI that can be used with the Go programming language. There are a couple different recommended methods to work with the Go BCI.
Don’t Ship The Compiler Go is a compiled language producing a binary as the end result. That means the compiler does not need to be shipped as part of the images that are distributed. Instead, it is recommended that the Go image is used as the builder image only.</description></item><item><title>How To Use BCIs As VScode Development Containers</title><link>https://opensource.suse.com/bci-docs/guides/vscode-dev-containers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://opensource.suse.com/bci-docs/guides/vscode-dev-containers/</guid><description>VS Code with the source mounted in a Development Container. The open terminal is a console within the container. Visual Studio Code has a feature called Development Containers. This is part of the built-in functionality to work with remote containers. The SLE Language Stack BCIs make a great choice to use as a development environment.
Why Use The SLE BCI In Development Containers There are two reasons the BCI language stack containers are useful for development.</description></item><item><title>How to use container-suseconnect</title><link>https://opensource.suse.com/bci-docs/guides/container-suseconnect/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://opensource.suse.com/bci-docs/guides/container-suseconnect/</guid><description>What is container-suseconnect? container-suseconnect is a plugin available in all Base Container Images that ship with Zypper. When the plugin detects the host’s SUSE Linux Enterprise Server registration credentials, it uses them to give the container access the SUSE Linux Enterprise repositories. This includes additional modules and previous package versions that are not part of the free SLE_BCI repository.
How to use container-suseconnect If you are running a registered SLES system with Docker, container-suseconnect automatically detects and uses the subscription, without requiring any action on your part.</description></item><item><title>Launch Containers with Podman and Systemd</title><link>https://opensource.suse.com/bci-docs/guides/podman-generate-systemd/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://opensource.suse.com/bci-docs/guides/podman-generate-systemd/</guid><description>Local Container Orchestration A container runtime makes it easy to launch an application distributed as a single container. But things get more complicated when you need to run applications consisting of multiple containers, or when it’s necessary to start the applications automatically on system boot and restart them after they crash. While container orchestration tools like Kubernetes are designed for that exact purpose, they are intended to be used for highly distributed and scalable systems with hundreds of nodes, and not for a single machine.</description></item><item><title>Using SLE BCI</title><link>https://opensource.suse.com/bci-docs/guides/using-sle-bci/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://opensource.suse.com/bci-docs/guides/using-sle-bci/</guid><description>Package manager The default package manager in SUSE Linux Enterprise is Zypper. Similar to APT in Debian and APK in Alpine Linux, Zypper offers a command-line interface for all package management tasks. Below is brief overview of commonly used container-related Zypper commands.
Install packages zypper --non-interactive install $PACKAGE_NAME Add a repository zypper --non-interactive addrepo $REPOSITORY_URL; zypper --non-interactive refresh Update all packages zypper --non-interactive update Remove a package zypper --non-interactive remove --clean-deps $PACKAGE_NAME the --clean-deps flag ensures that no longer required dependencies are removed as well</description></item><item><title>Verify SLE Base Container Images With Cosign</title><link>https://opensource.suse.com/bci-docs/guides/verify-with-cosign/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://opensource.suse.com/bci-docs/guides/verify-with-cosign/</guid><description>SUSE has SLE Base Container Images (BCI) that are great to use in workflows and as a based under your applications. One of the big reasons I like these images is that they are constantly updated with fixes for Common Vulnerabilities and Exposures (CVE). SUSE stays on top of this and takes security seriously.
For example, prior to writing this post I used Trivy to scan the Go image:</description></item></channel></rss>