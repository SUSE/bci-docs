<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Introduction to SLE Base Container Images on SLE BCI Documentation</title><link>https://opensource.suse.com/bci-docs/</link><description>Recent content in Introduction to SLE Base Container Images on SLE BCI Documentation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://opensource.suse.com/bci-docs/index.xml" rel="self" type="application/rss+xml"/><item><title>Adding Users to SLE BCI Micro and Minimal</title><link>https://opensource.suse.com/bci-docs/guides/adding-users/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://opensource.suse.com/bci-docs/guides/adding-users/</guid><description>This guide will demonstrate how to add users to the SLE BCI Micro and SLE BCI Minimal images, without having the useradd binary installed.
Background The SLE BCI Micro and Minimal images are tailored towards providing a small footprint and thus do not ship the useradd binary. While this reduces the image size, creating new users inside containers based on BCI Micro or Minimal involves a few additional steps.</description></item><item><title>BCI-Base, BCI-Minimal, BCI-Micro, and BCI-BusyBox</title><link>https://opensource.suse.com/bci-docs/documentation/general-purpose-bci/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://opensource.suse.com/bci-docs/documentation/general-purpose-bci/</guid><description>SUSE offers several general-purpose SLE Base Container Images that are intended as deployment targets or as foundations for creating customized images: BCI-Base, BCI-Minimal, BCI-Micro, and BCI-BusyBox. These images share the common SLES base, and none of them ship with a specific language or an application stack. All images feature the RPM database (even if the specific image does not include the RPM package manager) that can be used to verify the provenance of every file in the image.</description></item><item><title>Building and Deploying Go Applications</title><link>https://opensource.suse.com/bci-docs/guides/use-with-golang/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://opensource.suse.com/bci-docs/guides/use-with-golang/</guid><description>There is a SLE BCI that can be used with the Go programming language. There are a couple different recommended methods to work with the Go SLE BCI.
Don’t Ship The Compiler Go is a compiled language producing a binary as the end result. That means the compiler does not need to be shipped as part of the images that are distributed. Instead, it is recommended that the Go image is used as the builder image only.</description></item><item><title>Deploy an Application using zypper</title><link>https://opensource.suse.com/bci-docs/guides/deploy-using-zypper/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://opensource.suse.com/bci-docs/guides/deploy-using-zypper/</guid><description>Scope The purpose of this guide is to deploy an application or the dependencies of an application from rpms into a deployment image using the zypper package manager.
Using zypper’s custom root Zypper provides the --installroot flag to install packages into a custom root and not use /. We can leverage this to install packages including all of their dependencies into a custom root and then copy this directory into a deployment image.</description></item><item><title>Frequently Asked Questions</title><link>https://opensource.suse.com/bci-docs/documentation/faq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://opensource.suse.com/bci-docs/documentation/faq/</guid><description>What? What has SUSE announced? SUSE Base Container Images (BCI) provides a repository of tested and certified container images based on SUSE Linux Enterprise Server. The container images are ready-to-go for enterprise use. SUSE maintains these images on a regular basis so you can use them worry-free. The images are updated with the latest security patches and features/functionalities are consistent with the base OS releases.
With Rancher 2.6, SUSE has announced full integration between Rancher and BCI while ensuring the latest security standards.</description></item><item><title>How to build a distroless image using SLE BCI</title><link>https://opensource.suse.com/bci-docs/guides/building-a-distroless-image/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://opensource.suse.com/bci-docs/guides/building-a-distroless-image/</guid><description>What is a distroless image? Distroless images are stripped down container images, where the underlying Linux distribution is reduced to the bare minimum. A distroless image normally contains only certificates and specific core libraries, and it does not include a shell or utilities like cat or ls.
The advantages of distroless images include smaller size and potentially fewer vulnerabilities.
The major disadvantage is the difficulty of debugging a containerized application, as the container image does not provide any debugging tools and may even lack tools to read log files.</description></item><item><title>How to use container-suseconnect</title><link>https://opensource.suse.com/bci-docs/guides/container-suseconnect/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://opensource.suse.com/bci-docs/guides/container-suseconnect/</guid><description>What is container-suseconnect? container-suseconnect is a plugin available in all Base Container Images that ship with Zypper. When the plugin detects the host’s SUSE Linux Enterprise Server registration credentials, it uses them to give the container access the SUSE Linux Enterprise repositories. This includes additional modules and previous package versions that are not part of the free SLE_BCI repository.
How to use container-suseconnect If you are running a registered SLES system with Docker, container-suseconnect automatically detects and uses the subscription, without requiring any action on your part.</description></item><item><title>How To Use SLE BCIs As VScode Development Containers</title><link>https://opensource.suse.com/bci-docs/guides/vscode-dev-containers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://opensource.suse.com/bci-docs/guides/vscode-dev-containers/</guid><description>VS Code with the source mounted in a Development Container. The open terminal is a console within the container. Visual Studio Code has a feature called Development Containers. This is part of the built-in functionality to work with remote containers. The Language Stack SLE BCIs make a great choice to use as a development environment.
Why Use The SLE BCI In Development Containers There are two reasons the BCI language stack containers are useful for development.</description></item><item><title>Language stack SLE Base Container Images</title><link>https://opensource.suse.com/bci-docs/documentation/language-stack-bci/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://opensource.suse.com/bci-docs/documentation/language-stack-bci/</guid><description>If you have a working knowledge of containers, you will not have any difficulties using SLE BCIs. However, there are certain features that set SLE BCIs apart from similar offerings, like images based on Debian or Alpine Linux. And understanding the specifics can help you to get the most out of SLE BCIs in the shortest time possible.
Language stack SLE BCIs Language stack SLE BCI are built on top of BCI-Base.</description></item><item><title>Launch Containers with Podman and Systemd</title><link>https://opensource.suse.com/bci-docs/guides/podman-generate-systemd/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://opensource.suse.com/bci-docs/guides/podman-generate-systemd/</guid><description>Local Container Orchestration A container runtime makes it easy to launch an application distributed as a single container. But things get more complicated when you need to run applications consisting of multiple containers, or when it’s necessary to start the applications automatically on system boot and restart them after they crash. While container orchestration tools like Kubernetes are designed for that exact purpose, they are intended to be used for highly distributed and scalable systems with hundreds of nodes, and not for a single machine.</description></item><item><title>Using SLE BCI</title><link>https://opensource.suse.com/bci-docs/guides/using-sle-bci/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://opensource.suse.com/bci-docs/guides/using-sle-bci/</guid><description>Package manager The default package manager in SUSE Linux Enterprise is Zypper. Similar to APT in Debian and APK in Alpine Linux, Zypper offers a command-line interface for all package management tasks. Below is brief overview of commonly used container-related Zypper commands.
Install packages zypper --non-interactive install $PACKAGE_NAME Add a repository zypper --non-interactive addrepo $REPOSITORY_URL; zypper --non-interactive refresh Update all packages zypper --non-interactive update Remove a package zypper --non-interactive remove --clean-deps $PACKAGE_NAME the --clean-deps flag ensures that no longer required dependencies are removed as well</description></item><item><title>Verify SLE Base Container Images</title><link>https://opensource.suse.com/bci-docs/guides/verify-sle-bci/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://opensource.suse.com/bci-docs/guides/verify-sle-bci/</guid><description>Introduction Verifying container images allows you to confirm their provenance, thus ensuring the supply chain security. This document demonstrates how to verify container images using Cosign and how to integrate the verification step into your Podman installation.
Verifying SLE BCI with Cosign To verify a SLE BCI image, run Cosign in the container. The command below fetches the signing key from the SUSE server and uses it to verify the latest BCI-Base container image.</description></item><item><title>Why SLE Base Container Images</title><link>https://opensource.suse.com/bci-docs/documentation/why-sle-bci/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://opensource.suse.com/bci-docs/documentation/why-sle-bci/</guid><description>SLE BCIs offer a platform for creating SLE-based custom container images and containerized applications that can be distributed freely. SLE BCIs feature the same predictable enterprise lifecycle as SLES. The SLE_BCI 15 SP3 and SP4 repository (which is a subset of the SLE repository) gives SLE BCIs access to 4,000 packages available for the AMD64/Intel 64, AArch64, ppc64le, and s390x architectures. The packages in the repository have undergone quality assurance and security audits by SUSE.</description></item></channel></rss>