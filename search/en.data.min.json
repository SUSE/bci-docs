[{"id":0,"href":"/documentation/general-purpose-bci/","title":"BCI-Base, BCI-Minimal, BCI-Micro, and BCI-BusyBox","parent":"Documentations","content":" SUSE offers several general-purpose SLE Base Container Images that are intended as deployment targets or as foundations for creating customized images: BCI-Base, BCI-Minimal, BCI-Micro, and BCI-BusyBox. These images share the common SLES base, and none of them ship with a specific language or an application stack. All images feature the RPM database (even if the specific image does not include the RPM package manager) that can be used to verify the provenance of every file in the image. Each image includes the SLES certificate bundle, which allows the deployed applications to use the system’s certificates to verify TLS connections.\nQuick overview The table below provides a quick overview of the differences between BCI-Base, BCI-Minimal, BCI-Micro, and BCI-BusyBox.\nBCI-Base and BCI-Init: When you need flexibility This SLE BCI comes with the Zypper package manager and a free SLE-BCI repository. This allows you to install software available in the repository and customize the image during the build. The downside is the size of the image. It is the largest of the general-purpose SLE BCIs, so it is not always the best choice for a deployment image.\nA variant of BCI-Base called BCI-Init comes with systemd preinstalled. The BCI-Init container image can be useful in scenarios requiring systemd for managing services in a single container.\nBCI-Minimal: When you do not need Zypper This is a stripped-down version of the BCI-Base image. BCI-Minimal comes without Zypper, but it does have the RPM package manager installed. This significantly reduces the size of the image. However, while RPM can install and remove packages, it lacks support for repositories and automated dependency resolution. The BCI-Minimal image is therefore intended for creating deployment containers, and then installing the desired RPM packages inside the containers. Although you can install the required dependencies, you need to download and resolve them manually. However, this approach is not recommended as it is prone to errors.\nBCI-Micro: When you need to deploy static binaries This image is similar to BCI-Minimal but without the RPM package manager. The primary use case for the image is deploying static binaries produced externally or during multi-stage builds. As there is no straightforward way to install additional dependencies inside the container image, we recommend deploying a project using the BCI-Minimal image only when the final build artifact bundles all dependencies and has no external runtime requirements (like Python or Ruby).\nBCI-BusyBox: When you need the smallest and GPLv3-free image Similar to BCI-Micro, the BCI-BusyBox image comes with the most basic tools only. However, these tools are provided by the BusyBox project. This has the benefit of further size reduction. Furthermore, the image contains no GPLv3 licensed software. When using the image, keep in mind that there are certain differences between the BusyBox tools and the GNU Coreutils. So scripts written for a system that uses GNU Coreutils may require modification to work with BusyBox.\nApproximate sizes For your reference, the list below provides an approximate size of each SLE BCI. Keep in mind that the provided numbers are rough estimations.\nBCI-Base ~94 MB\nBCI-Minimal ~42 MB\nBCI-Micro ~26 MB\nBCI-BusyBox ~14 MB\n"},{"id":1,"href":"/categories/","title":"Categories","parent":"Introduction to SLE Base Container Images","content":""},{"id":2,"href":"/documentation/","title":"Documentations","parent":"Introduction to SLE Base Container Images","content":""},{"id":3,"href":"/documentation/faq/","title":"Frequently Asked Questions","parent":"Documentations","content":" What is SLE BCI? "},{"id":4,"href":"/guides/","title":"Guides","parent":"Introduction to SLE Base Container Images","content":""},{"id":5,"href":"/guides/vscode-dev-containers/","title":"How To Use BCIs As VScode Development Containers","parent":"Guides","content":" VS Code with the source mounted in a Development Container. The open terminal is a console within the container. Visual Studio Code has a feature called Development Containers. This is part of the built-in functionality to work with remote containers. The SLE Language Stack BCIs make a great choice to use as a development environment.\nWhy Use The SLE BCI In Development Containers There are two reasons the BCI language stack containers are useful for development.\nFirst, you develop in the same environment as when you use a BCI language stack image to build or run your application. Being able to develop and build or run your application in the same environment setup enables you to discover quirks and issues that are related to the way your application works in the environment.\nSecond, when you have a team of people working on an application, all developers will have the same environment to work in. Whether they are on Windows, macOS, or Linux their will be the same.\nDocker Socket Required VS Code creates the development containers using the Docker Engine and it communicates with it over the Docker socket. That means you need a Docker socket available on your system.\nRancher Desktop is our recommended app for working with containers. It is available for Windows, macOS, and Linux. Alternatively, you can use another tool such as Docker Desktop or the Docker Engine itself if you are using Linux.\nVS Code mounts your code from the local system inside the container. This works best when the container runtime is on your local system as opposed to remote. While possible to do this with the container runtime on a remote system, this guide does not cover running the development container on a remote machine.\nDevelopment Container Basics Development containers enable you to mount any folder inside a container where you can specify the environment. Debugging, extensions, and other features work with the code as it is mounted within the container rather than the location on the local file system.\nDevelopment Container Configuration The configuration for Development Containers is stored in a file named .devcontainer/devcontainer.json. When you open up a codebase with this configuration file present, VS Code will read the configuration and present you with an option to use a Development Container.\nThere are two ways to specify where to get the container from. You can point it at an image or you can point it at a Dockerfile to build the image from. Since VS Code needs some additional packages installed you can’t simply point it at a BCI image.\nTo illustrate using the Dockerfile method we can look at a setup for the Go programming language. A Dockerfile placed in the .devcontainer directory would look like:\nFROM registry.suse.com/bci/golang:1.18 # Install tools needed by Visual Studio Code Remote Development Containers RUN zypper --non-interactive install -y tar git gzip VS Code needs git, gzip, and tar installed which are not present in the Go BCI image by default.\nWhile this example is targeted at Go, it will work for other languages where there is a BCI language stack available.\nThis file needs to be referenced in the devcontainer/devcontainer.json file. For example, a devcontainer.json could look like the following:\n{ \u0026#34;name\u0026#34;: \u0026#34;Golang\u0026#34;, \u0026#34;build\u0026#34;: { \u0026#34;dockerfile\u0026#34;: \u0026#34;Dockerfile\u0026#34; } } If you open up a project with these files in them VS Code will prompt you to open them in a container as the image below illustrates.\nPop-up asking if you want to open the code within a Development Container. This example JSON configuration file is in its simplest form. You can learn more details about the additional configuration in the VS Code documentation for Development Containers.\n"},{"id":6,"href":"/guides/container-suseconnect/","title":"How to use container-suseconnect","parent":"Guides","content":" What is container-suseconnect? container-suseconnect is a plugin available in all Base Container Images that ship with Zypper. When the plugin finds the host’s SUSE Linux Enterprise Server registration credentials, it uses them to give the container access the SUSE Linux Enterprise repositories. This includes additional modules and previous package versions that are not part of the free SLE_BCI repository.\nHow to use container-suseconnect If you are running a registered SLES system with Docker, container-suseconnect automatically detects and uses the subscription, without requiring any action on your part.\nOn openSUSE systems with Docker, you must copy the files /etc/SUSEConnect and /etc/zypp/credentials.d/SCCcredentials from a registered SLES machine to your local machine. Note that the /etc/SUSEConnect file is required only if you are using RMT for managing your registration credentials.\nHow to use container-suseconnect on non-SLE hosts or with Podman, Buildah or with nerdctl You need a registered SLES system to use container-suseconnect on non-SLE hosts or with Podman, Buildah, or with nerdctl. This can be a physical machine, a virtual machine, or the bci-base container with SUSEConnect installed and registered. If you don’t use RMT, copy /etc/zypp/credentials.d/SCCcredentials to the development machine. Otherwise, copy both the /etc/zypp/credentials.d/SCCcredentials and /etc/SUSEConnect files.\nYou can use the following command to obtain SCCcredentials (replace REGISTRATION_CODE with your SCC registration code)\nDocker docker run --rm registry.suse.com/suse/sle15:latest bash -c \\ \u0026#34;zypper -n in SUSEConnect; SUSEConnect --regcode REGISTRATION_CODE; \\ cat /etc/zypp/credentials.d/SCCcredentials\u0026#34; Podman podman run --rm registry.suse.com/suse/sle15:latest bash -c \\ \u0026#34;zypper -n in SUSEConnect; SUSEConnect --regcode REGISTRATION_CODE; \\ cat /etc/zypp/credentials.d/SCCcredentials\u0026#34; nerdctl nerdctl run --rm registry.suse.com/suse/sle15:latest bash -c \\ \u0026#34;zypper -n in SUSEConnect; SUSEConnect --regcode REGISTRATION_CODE; \\ cat /etc/zypp/credentials.d/SCCcredentials\u0026#34; If you are directly running a container based on a BCI, mount SCCcredentials (and optionally /etc/SUSEConnect) in the correct destination. The following example shows how to mount SCCcredentials in the current working directory:\nDocker docker run -v /path/to/SCCcredentials:/etc/zypp/credentials.d/SCCcredentials \\ -it --pull=always registry.suse.com/bci/bci-base:latest Podman podman run -v /path/to/SCCcredentials:/etc/zypp/credentials.d/SCCcredentials \\ -it --pull=always registry.suse.com/bci/bci-base:latest nerdctl nerdctl run -v /path/to/SCCcredentials:/etc/zypp/credentials.d/SCCcredentials \\ -it --pull=always registry.suse.com/bci/bci-base:latest Do not copy the SCCcredentials and SUSEConnect files into your container image to avoid inadvertently adding them to the final image. Use secrets instead, as they are only available to a single layer and are not part of the built image. To do this, put a copy of SCCcredentials (and optionally SUSEConnect) somewhere on your file system and modify the RUN instructions that invoke Zypper as follows:\nFROM registry.suse.com/bci/bci-base:latest RUN --mount=type=secret,id=SUSEConnect \\ --mount=type=secret,id=SCCcredentials \\ zypper -n in fluxbox Docker and Buildah both support mounting secrets via the --secret flag as follows: Docker docker build --secret=id=SCCcredentials,src=/path/to/SCCcredentials \\ --secret=id=SUSEConnect,src=/path/to/SUSEConnect . Podman buildah bud --layers --secret=id=SCCcredentials,src=/path/to/SCCcredentials \\ --secret=id=SUSEConnect,src=/path/to/SUSEConnect . Adding modules into the container or container Image container-suseconnect allows you to automatically add SLE Modules into a container or container image. What modules are added is determined by the environment variable ADDITIONAL_MODULES. It must include a a comma-separated list of the full module names. In a Dockerfile, this is done using the ENV directive as follows:\nFROM registry.suse.com/bci/bci-base:latest ENV ADDITIONAL_MODULES sle-module-desktop-applications,sle-module-development-tools RUN --mount=type=secret,id=SCCcredentials zypper -n in fluxbox \u0026amp;\u0026amp; zypper -n clean "},{"id":7,"href":"/","title":"Introduction to SLE Base Container Images","parent":"","content":" SLE Base Container Image (SLE BCI) are minimal SUSE Linux Enterprise Server 15-based images that you can use to develop, deploy, and share applications. There are two types of SLE BCI:\nGeneral-purpose SLE BCI can be used for building custom container images and for deploying applications.\nLanguage stack SLE BCI provide minimal environments for developing and deploying applications in specific programming languages.\nIn addition to that, we will provide Application Container Images based on SLE BCI featuring popular containerized applications like Nginx, PostgreSQL, MariaDB and RMT.\nHighlights SLE BCI are fully compatible with SUSE Linux Enterprise Server, but they do not require a subscription to run and distribute them.\nSLE BCI automatically run in FIPS-compatible mode when the host operating system is running in FIPS mode.\nEach SLE BCI includes the RPM database, which makes it possible to audit the contents of the container image. You can use the RPM database to determine the specific version of the RPM package any given file belongs to. This allows you to ensure that a container image is not susceptible to known and already fixed vulnerabilities.\nAll SLE BCI (except for those without zypper) come with the container-suseconnect service. This gives containers that run on a registered SLES host access to the full SLES repositories. container-suseconnect is invoked automatically when you run zypper for the first time, and the service adds the correct SLES repositories into the running container. On an unregistered SLES host or on a non-SLES host, the service does nothing.\nGeneral-purpose SLE BCI There are four general purpose SLE BCI, and each container image comes with a minimum set of packages to keep its size low. You can use a general purpose SLE BCI either as a starting point for building custom container images, or as a platform for deploying specific software. For more information about general purpose SLE BCI, see here.\nLanguage stack SLE BCI Language stack SLE BCI are built on top of the BCI-Base general-purpose SLE BCI. Each container image comes with the zypper stack and the free SLE_BCI repository. Additionally, each image includes most common tools for building and deploying applications in the specific language environment. This includes tools like a compiler or interpreter as well as the language specific package manager. For more information about language stack SLE BCI, see here.\nImportant note on status and lifecycle All container images, except for bci-base, are currently classified as tech preview, and SUSE doesn’t provide official support for them. This information is visible on the web on registry.suse.com. In addition to that, it is also indicated via the com.suse.supportlevel label whether a container image still has the tech preview status. You can use the skopeo and jq utilities to check the status of the desired SLE BCI as follows:\n❯ skopeo inspect docker://registry.suse.com/bci/bci-micro:15.4 | jq \u0026#39;.Labels[\u0026#34;com.suse.supportlevel\u0026#34;]\u0026#39; \u0026#34;techpreview\u0026#34; ❯ skopeo inspect docker://registry.suse.com/bci/bci-base:15.4 | jq \u0026#39;.Labels[\u0026#34;com.suse.supportlevel\u0026#34;]\u0026#39; \u0026#34;l3\u0026#34; In the example above, the com.suse.supportlevel label is set to techpreview in the bci-micro container image, indicating that the image still has the tech preview status. The bci-base container image on the other hand is fully l3 supported. Unlike like the general purpose SLE BCI, the language stack SLE BCI may not follow the lifecycle of the SLE distribution: they are supported as long as the respective language stack receives support. In other words, new versions of SLE BCI (indicated by the OCI tags) may be released during the lifecycle of a SLE Service Pack, while older versions may become unsupported. Refer to suse.com/lifecycle to find out whether the container in question is still under support.\nGetting started The SLE BCI are available as OCI-compatible container images directly from registry.suse.com and can be used like any other container image. For example, using one of the general purpose containers:\nDocker ❯ docker run --rm -it registry.suse.com/bci/bci-base:15.4 grep \u0026#39;^NAME\u0026#39; /etc/os-release NAME=\u0026#34;SLES\u0026#34; Podman ❯ podman run --rm -it registry.suse.com/bci/bci-base:15.4 grep \u0026#39;^NAME\u0026#39; /etc/os-release NAME=\u0026#34;SLES\u0026#34; nerdctl ❯ nerdctl run --rm -it registry.suse.com/bci/bci-base:15.4 grep \u0026#39;^NAME\u0026#39; /etc/os-release NAME=\u0026#34;SLES\u0026#34; Alternatively, you can use SLE BCI in a Dockerfile as follows:\nFROM registry.suse.com/bci/bci-base:15.4 RUN zypper -n in python3 \u0026amp;\u0026amp; \\ echo \u0026#34;Hello Green World!\u0026#34; \u0026gt; index.html ENTRYPOINT [\u0026#34;/usr/bin/python3\u0026#34;, \u0026#34;-m\u0026#34;, \u0026#34;http.server\u0026#34;] EXPOSE 8000 You can then build container images using your favorite container runtime:\nDocker ❯ docker build . Sending build context to Docker daemon 2.048kB Step 1/4 : FROM registry.suse.com/bci/bci-base:15.4 ---\u0026gt; e34487b4c4e1 Step 2/4 : RUN zypper -n in python3 \u0026amp;\u0026amp; echo \u0026#34;Hello Green World!\u0026#34; \u0026gt; index.html ---\u0026gt; Using cache ---\u0026gt; 9b527dfa45e8 Step 3/4 : ENTRYPOINT [\u0026#34;/usr/bin/python3\u0026#34;, \u0026#34;-m\u0026#34;, \u0026#34;http.server\u0026#34;] ---\u0026gt; Using cache ---\u0026gt; 953080e91e1e Step 4/4 : EXPOSE 8000 ---\u0026gt; Using cache ---\u0026gt; 48b33ec590a6 Successfully built 48b33ec590a6 ❯ docker run -p 8000:8000 --rm -d 48b33ec590a6 575ad7edf43e11c2c9474055f7f6b7a221078739fc8ce5765b0e34a0c899b46a ❯ curl localhost:8000 Hello Green World! Podman ❯ buildah bud --layers . STEP 1/4: FROM registry.suse.com/bci/bci-base:15.4 STEP 2/4: RUN zypper -n in python3 \u0026amp;\u0026amp; echo \u0026#34;Hello Green World!\u0026#34; \u0026gt; index.html --\u0026gt; Using cache 8541a01ef66f1e43f850d30d756628fe301ae0ffe09dd3918d7e64d6e1788a3a --\u0026gt; 8541a01ef66 STEP 3/4: ENTRYPOINT [\u0026#34;/usr/bin/python3\u0026#34;, \u0026#34;-m\u0026#34;, \u0026#34;http.server\u0026#34;] --\u0026gt; Using cache 61cccdaa38aab5a44b0ef24935f4aa671f3231b611e0fa45c32ce869da6f9461 --\u0026gt; 61cccdaa38a STEP 4/4: EXPOSE 8000 --\u0026gt; Using cache 3e93a763b2d0a56ffe70429ca05a110288a868b46b92f47c1609a1129d058383 --\u0026gt; 3e93a763b2d 3e93a763b2d0a56ffe70429ca05a110288a868b46b92f47c1609a1129d058383 ❯ podman run --rm -d -p 8000:8000 3e93a763b2d0a56ffe70429ca05a110288a868b46b92f47c1609a1129d058383 e6115cbd37cf94781597cb7b8ade500951e7f4206b13102bdd9e603279378e17 ❯ curl localhost:8000 Hello Green World! "},{"id":8,"href":"/documentation/language-stack-bci/","title":"Language stack SLE Base Container Images","parent":"Documentations","content":" If you have a working knowledge of containers, you will not have any difficulties using SLE BCIs. However, there are certain features that set SLE BCIs apart from similar offerings, like images based on Debian or Alpine Linux. And understanding the specifics can help you to get the most out of SLE BCIs in the shortest time possible.\nLanguage stack SLE BCIs Language stack SLE BCI are built on top of BCI-Base. Below is an overview of the available language stack SLE BCIs.\npython URL: registry.suse.com/bci/python\nTags: 3.6, 3.9, 3.10\nShips with the python3 version from the tag and pip3, curl, git tools.\nnode URL: registry.suse.com/bci/node\nTags: 12, 14, 16\nComes with nodejs version from the tag, npm and git. The yarn package manager can be installed with the npm install -g yarn command.\nopenjdk URL: registry.suse.com/bci/openjdk\nTags: 11, 17\nShips with the OpenJDK runtime. Designed for deploying Java applications.\nopenjdk-devel URL: registry.suse.com/bci/openjdk-devel\nTags: 11, 17\nIncludes the development part of OpenJDK in addition to the OpenJDK runtime. Instead of Bash, the default entry point is the jshell shell.\nruby URL: registry.suse.com/bci/ruby\nTags: 2.5\nA standard development environment based on Ruby 2.5, featuring ruby, gem and bundler as well as git and curl.\ngolang URL: registry.suse.com/bci/golang\nTags: 1.16, 1.17, 1.18\nShips with the go compiler version specified in the tag.\ndotnet-runtime URL: registry.suse.com/bci/dotnet-runtime\nTags: 3.1, 5.0, 6.0\nIncludes the .NET runtime from Microsoft and the Microsoft .NET repository.\ndotnet-aspnet URL: registry.suse.com/bci/dotnet-aspnet\nTags: 3.1, 5.0, 6.0\nShips with the ASP.NET runtime from Microsoft and the Microsoft .NET repository.\ndotnet-sdk URL: registry.suse.com/suse/dotnet-sdk\nTags: 3.1, 5.0, 6.0\nComes with the .NET and ASP.NET SDK from Microsoft as well as the Microsoft .NET repository.\nrust URL: registry.suse.com/bci/rust\nTags: 1.59, 1.60\nShips with the Rust compiler and the cargo package manager.\n"},{"id":9,"href":"/tags/","title":"Tags","parent":"Introduction to SLE Base Container Images","content":""},{"id":10,"href":"/guides/using-sle-bci/","title":"Using SLE BCI","parent":"Guides","content":" Package manager The default package manager in SUSE Linux Enterprise is Zypper. Similar to APT in Debian and APK in Alpine Linux, Zypper offers a command-line interface for all package management tasks. Below is brief overview of commonly used container-related Zypper commands.\nInstall packages zypper --non-interactive install $PACKAGE_NAME Add a repository zypper --non-interactive addrepo $REPOSITORY_URL; zypper --non-interactive refresh Update all packages zypper --non-interactive update Remove a package zypper --non-interactive remove --clean-deps $PACKAGE_NAME the --clean-deps flag ensures that no longer required dependencies are removed as well\nClean up temporary files zypper clean For more information on using Zypper, refer to the zypper documentation.\nAll the described commands use the --non-interactive flag to skip confirmations, since you cannot approve these manually during container builds. Keep in mind that you must use the flag with any command that modifies the system. Also note that --non-interactive is not a \u0026#34;yes to all\u0026#34; flag. Instead, --non-interactive confirms what is considered to be the intention of the user. For example, an installation command with the --non-interactive option fails if it needs to import new repository signing keys, as that is something that the user should verify themselves.\nCommon patterns Here are a few examples that can give you an idea how to accomplish certain tasks in SLE BCI compared to Debian.\nRemove orphaned packages Debian: apt-get autoremove -y\nSLE BCI: Not required as long as you remove installed packages using the zypper --non-interactive remove --clean-deps $PACKAGE_NAME\nObtain container’s architecture Debian: dpkgArch=\u0026#34;$(dpkg --print-architecture | awk -F- \u0026#39;{ print $NF }\u0026#39;)\u0026#34;\nSLE BCI: arch=\u0026#34;$(uname -p|sed \u0026#39;s/x86_64/amd64/\u0026#39;)\u0026#34;\nInstall packages required for compilation Debian: apt-get install -y build-essential\nSLE BCI: zypper -n in gcc gcc-c++ make\nVerify GnuPG signatures Debian: gpg --batch --verify $SIGNATURE_URL $FILE_TO_VERIFY\nSLE BCI: zypper -n in dirmngr; gpg --batch --verify $SIGNATURE_URL $FILE_TO_VERIFY; zypper -n remove --clean-deps dirmngr; zypper -n clean\nPackage naming conventions SUSE Linux Enterprise package naming conventions differ from Debian, Ubuntu, and Alpine, and they are closer to those of Red Hat Enterprise Linux. The main difference is that development packages of libraries (that is, packages containing headers and build description files) are named $PACKAGE-devel in SUSE Linux Enterprise, as opposed to $PACKAGE-dev as they are in Debian and Ubuntu. When in doubt, search for the package directly using the following command:\nDocker docker run --rm registry.suse.com/bci/bci-base:$OS_VERSION zypper search $PACKAGE_NAME Podman podman run --rm registry.suse.com/bci/bci-base:$OS_VERSION zypper search $PACKAGE_NAME nerdctl nerdctl run --rm registry.suse.com/bci/bci-base:$OS_VERSION zypper search $PACKAGE_NAME (replace OS_VERSION with the appropriate service version number, for example: 15.3 or 15.4).\nAdding GPG signing keys Adding external repositories to a container or container image normally requires importing the GPG key used for signing the packages. This can be done with the rpm --import $KEY_URL command. This adds the key to the RPM database, and all packages from the repository can be installed afterwards.\n"},{"id":11,"href":"/guides/verify-with-cosign/","title":"Verify SLE Base Container Images With Cosign","parent":"Guides","content":" SUSE has SLE Base Container Images (BCI) that are great to use in workflows and as a based under your applications. One of the big reasons I like these images is that they are constantly updated with fixes for Common Vulnerabilities and Exposures (CVE). SUSE stays on top of this and takes security seriously.\nFor example, prior to writing this post I used Trivy to scan the Go image:\n❯ trivy i registry.suse.com/bci/golang:latest 2022-03-11T09:12:48.961-0500 INFO Detected OS: suse linux enterprise server 2022-03-11T09:12:48.961-0500 INFO Detecting SUSE vulnerabilities... 2022-03-11T09:12:48.962-0500 INFO Number of language-specific files: 21 registry.suse.com/bci/golang:latest (suse linux enterprise server 15.3) ======================================================================= Total: 0 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 0) The same can be found for the other images and on the most recent tags.\nHow To Verify Images With Cosign Cosign provides the ability to sign and verify images (and other things). It’s a project from Sigstore, a sub-foundation of the Linux Foundation. The BCIs can now be verified using Cosign. For example:\nlocal install ❯ cosign verify \\ --key https://ftp.suse.com/pub/projects/security/keys/container–key.pem \\ registry.suse.com/bci/bci-base:latest | tail -1 | jq [ { \u0026#34;critical\u0026#34;: { \u0026#34;identity\u0026#34;: { \u0026#34;docker-reference\u0026#34;: \u0026#34;registry.suse.com/bci/bci-base\u0026#34; }, \u0026#34;image\u0026#34;: { \u0026#34;docker-manifest-digest\u0026#34;: \u0026#34;sha256:52a828600279746ef669cf02a599660cd53faf4b2430a6b211d593c3add047f5\u0026#34; }, \u0026#34;type\u0026#34;: \u0026#34;cosign container image signature\u0026#34; }, \u0026#34;optional\u0026#34;: { \u0026#34;creator\u0026#34;: \u0026#34;OBS\u0026#34; } } ] using docker ❯ docker run --rm -it gcr.io/projectsigstore/cosign verify \\ --key https://ftp.suse.com/pub/projects/security/keys/container–key.pem \\ registry.suse.com/bci/bci-base:latest | tail -1 | jq [ { \u0026#34;critical\u0026#34;: { \u0026#34;identity\u0026#34;: { \u0026#34;docker-reference\u0026#34;: \u0026#34;registry.suse.com/bci/bci-base\u0026#34; }, \u0026#34;image\u0026#34;: { \u0026#34;docker-manifest-digest\u0026#34;: \u0026#34;sha256:52a828600279746ef669cf02a599660cd53faf4b2430a6b211d593c3add047f5\u0026#34; }, \u0026#34;type\u0026#34;: \u0026#34;cosign container image signature\u0026#34; }, \u0026#34;optional\u0026#34;: { \u0026#34;creator\u0026#34;: \u0026#34;OBS\u0026#34; } } ] You need to specify a key because SUSE images are signed with a secured SUSE key.\nIf you want to check the images against rekor, the immutable tamper resistant ledger, you can do so. For example:\nlocal install ❯ COSIGN_EXPERIMENTAL=1 cosign verify \\ --key https://ftp.suse.com/pub/projects/security/keys/container–key.pem \\ registry.suse.com/bci/bci-base:latest | tail -1 | jq [ { \u0026#34;critical\u0026#34;: { \u0026#34;identity\u0026#34;: { \u0026#34;docker-reference\u0026#34;: \u0026#34;registry.suse.com/bci/bci-base\u0026#34; }, \u0026#34;image\u0026#34;: { \u0026#34;docker-manifest-digest\u0026#34;: \u0026#34;sha256:52a828600279746ef669cf02a599660cd53faf4b2430a6b211d593c3add047f5\u0026#34; }, \u0026#34;type\u0026#34;: \u0026#34;cosign container image signature\u0026#34; }, \u0026#34;optional\u0026#34;: { \u0026#34;creator\u0026#34;: \u0026#34;OBS\u0026#34; } } ] using docker ❯ docker run --rm -it -e COSIGN_EXPERIMENTAL=1 gcr.io/projectsigstore/cosign \\ verify --key https://ftp.suse.com/pub/projects/security/keys/container–key.pem \\ registry.suse.com/bci/bci-base:latest | tail -1 | jq [ { \u0026#34;critical\u0026#34;: { \u0026#34;identity\u0026#34;: { \u0026#34;docker-reference\u0026#34;: \u0026#34;registry.suse.com/bci/bci-base\u0026#34; }, \u0026#34;image\u0026#34;: { \u0026#34;docker-manifest-digest\u0026#34;: \u0026#34;sha256:52a828600279746ef669cf02a599660cd53faf4b2430a6b211d593c3add047f5\u0026#34; }, \u0026#34;type\u0026#34;: \u0026#34;cosign container image signature\u0026#34; }, \u0026#34;optional\u0026#34;: { \u0026#34;creator\u0026#34;: \u0026#34;OBS\u0026#34; } } ] The more I dig into and support security the more I want my container images to do the same. Happy to see these container images provide a great foundation and security.\n"},{"id":12,"href":"/documentation/why-sle-bci/","title":"Why SLE Base Container Images","parent":"Documentations","content":" SLE BCIs offer a platform for creating SLE-based custom container images and containerized applications that can be distributed freely. SLE BCIs feature the same predictable enterprise lifecycle as SLES. The SLE_BCI 15 SP3 and SP4 repository (which is a subset of the SLE repository) gives SLE BCIs access to 4,000 packages available for the AMD64/Intel 64, AArch64, ppc64le, and s390x architectures. The packages in the repository have undergone quality assurance and security audits by SUSE. The container images are FIPS-compliant when running on a host in FIPS mode. In addition to that, SUSE can provide official support for SLE BCIs through SUSE subscription plans.\nSecurity Each package in the SLE_BCI repository undergoes security audits, and SLE BCIs benefit from the same mechanism of dealing with CVEs as SLES. All discovered and fixed vulnerabilities are announced via e-mail, the dedicated CVE pages, and as OVAL and CVRF data. To ensure a secure supply chain, all container images are signed with Notary v1, Podman’s GPG signatures, and Sigstore Cosign.\nStability Since SLE BCIs are based on SLE, they feature the same level of stability and quality assurance as SUSE Linux Enterprise Server. Similar to SLES, SLE BCIs receive maintenance updates that provide bug fixes, improvements, and security patches.\nTooling and integration SLE BCIs are designed to provide drop-in replacements for popular container images available on hub.docker.com. You can use the general-purpose SLE BCIs and the tools they put at your disposal to create custom container images, while the language stack SLE BCIs provide a foundation and the required tooling for building containerized applications.\nRedistribution BCIs are covered by a permissive EULA that allows you to redistribute custom container images based on a BCI.\n"}]